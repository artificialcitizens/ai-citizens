export const langgraphExamples =
  '<example>\n<task>\nWe need to build out a youtube graph that will parse a video and related data to return info to the user.\n\nI need you to build out the state for me and any related reducers\n\n{\ntitle: string\ndescription: string\nsummary: string\nrelatedUrls: string []\nurl: string\ntranscription: string\nmessages: BaseMessages\nerrors: string[]\n}\n</task>\n\n<output>\nimport { END, START, StateGraph, StateGraphArgs } from "@langchain/langgraph";\nimport { BaseMessage } from "@langchain/core/messages";\nimport { IterableReadableStream } from "@langchain/core/utils/stream";\n\n// Define the YouTube video state interface\ninterface YouTubeVideoState {\n  title: string;\n  description: string;\n  summary: string;\n  relatedUrls: string[];\n  url: string;\n  highlights: string[];\n  transcription: string;\n  /*\n    messages field for potential LLM interactions\n  */\n  messages: BaseMessage[];\n  error: string;\n}\n\nconst stringReducer = (prev: string = "", next?: string): string =>\n  next ?? prev;\nconst arrayReducer = <T>(prev: T[] = [], next?: T[]): T[] => {\n  if (!next) return prev;\n  return [...prev, ...next];\n};\n// Update the graphState with specific reducers for YouTube video state\nconst youtubeGraphState: StateGraphArgs<YouTubeVideoState>["channels"] = {\n  title: {\n    default: () => "",\n    value: stringReducer,\n  },\n  description: {\n    default: () => "",\n    value: stringReducer,\n  },\n  summary: {\n    default: () => "",\n    value: stringReducer,\n  },\n  relatedUrls: {\n    default: () => [],\n    value: (prev: string[] = [], next?: string[]): string[] => {\n      if (!next) return prev;\n      return [...new Set([...prev, ...next])];\n    },\n  },\n  url: {\n    default: () => "https://www.youtube.com/watch?v=dQw4w9WgXcQ",\n    value: stringReducer,\n  },\n  highlights: {\n    default: () => [],\n    value: arrayReducer,\n  },\n  transcription: {\n    default: () => "",\n    value: (prev: string = "", next?: string): string => next ?? prev,\n  },\n  messages: {\n    default: () => [],\n    value: arrayReducer,\n  },\n  error: {\n    default: () => "",\n    value: stringReducer,\n  },\n};\n\n// Define the YouTube graph\nconst youtubeGraphBuilder = new StateGraph<YouTubeVideoState>({\n  channels: youtubeGraphState,\n});\n\nyoutubeGraphBuilder\n  .addNode("getMetadata", async (state) => {\n    console.log("getMetadata", state);\n    // Fetch metadata (title, url, etc.) from YouTube API\n    // Return updated state or catch error to send to handleError node\n    // if error {\n    //   return {\n    //     error: "Error in processing video metadata",\n    // };\n    // }\n    return {\n      title: "Test Title",\n      description: "Test Description",\n      url: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",\n      transcription: "Test Transcription",\n    };\n  })\n  .addNode("getRelatedUrls", async (state) => {\n    console.log("getRelatedUrls", state);\n    // Fetch related URLs\n    // Return updated state\n    return {\n      relatedUrls: ["https://www.youtube.com/watch?v=dQw4w9WgXcQ"],\n    };\n  })\n  .addNode("extractHighlights", async (state) => {\n    console.log("extractHighlights", state);\n    // Extract highlights from video content\n    // Return updated state\n    return {\n      highlights: ["Highlight 1", "Highlight 2"],\n    };\n  })\n  .addNode("generateSummary", async (state) => {\n    console.log("generateSummary", state);\n    // Generate summary of the video\n    // Return updated state\n    return {\n      summary: "Test Summary",\n    };\n  })\n  .addNode("handleMissingTranscription", async (state) => {\n    console.log("Error in processing video metadata");\n    // @TODO: will use a more brute force method by ripping the audio from the video and transcribing ourselves\n    // we still want the meta data from the video though and will need to process in some capacity\n    return {\n      title: "Test Title",\n      description: "Test Description",\n      url: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",\n      transcription: "Brute Forced Test Transcription",\n    };\n  })\n  .addEdge(START, "getMetadata")\n  .addEdge("getRelatedUrls", END)\n  .addEdge("extractHighlights", END)\n  .addEdge("generateSummary", END)\n  .addEdge("handleMissingTranscription", "getRelatedUrls")\n  .addEdge("handleMissingTranscription", "extractHighlights")\n  .addEdge("handleMissingTranscription", "generateSummary")\n  .addConditionalEdges("getMetadata", (state) => {\n    // Example condition: if title is empty, go to error handling node\n    // else move to the next nodes\n    return state.title\n      ? ["getRelatedUrls", "extractHighlights", "generateSummary"]\n      : "handleMissingTranscription";\n  });\nconst youtubeGraph = youtubeGraphBuilder.compile();\n\nexport const processYouTubeVideo = async (\n  videoUrl: string,\n  config?: { configurable: { thread_id: string } }\n): Promise<YouTubeVideoState> => {\n  const initialState: Partial<YouTubeVideoState> = {\n    url: videoUrl,\n  };\n  const finalState = await youtubeGraph.invoke(initialState, config);\n  return finalState;\n};\n\n// Example of how to use streaming\nexport const streamYouTubeVideoProcessing = async (\n  videoUrl: string,\n  config?: { configurable: { thread_id: string } }\n): Promise<IterableReadableStream<YouTubeVideoState>> => {\n  const initialState: Partial<YouTubeVideoState> = {\n    url: videoUrl,\n  };\n  const stream = await youtubeGraph.stream(initialState, {\n    ...config,\n    configurable: { ...config?.configurable, stream_events: true },\n  });\n  return stream;\n};\n</output>\n</example>';
